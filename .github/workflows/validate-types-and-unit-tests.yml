# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Validate Types and Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    types: [assigned, opened, synchronize, reopened, edited]
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    # - uses: dorny/paths-filter@v2
    #   id: filter
    #   with:
    #     filters: |
    #       server:
    #         - 'server/**'
    - name: Use Node.js ${{ matrix.node-version }}
      if: ${{ steps.filter.outputs.server == 'true' }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    - run: npm ci
    # - run: npm run ci:validate
    #   if: ${{ steps.filter.outputs.server == 'true' }}
    # - run: ls -a
    # - run: chmod +x wait-for-test-db.sh
    # - run: docker-compose -f docker-compose.test.yml up -d
    #   env:
    #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #     TEST_DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5433/music_center_test?schema=public
    # - run: docker ps -a
    # - run: docker-compose -f docker-compose.test.yml ps --services
    # - run: docker logs server_test_db_1
    - run: npm run ci:test:int
      env:
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5433/music_center_test?schema=public
      # if: ${{ steps.filter.outputs.server == 'true' }}
